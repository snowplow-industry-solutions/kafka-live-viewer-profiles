services:
  localstack:
    container_name: s-localstack
    image: localstack/localstack
    restart: always
    ports:
      - 4566:4566
      - 4510-4559:4510-4559
    environment:
      - AWS_DEFAULT_REGION=eu-west-2
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=admin
      - SERVICES=sts,dynamodb,kinesis,cloudwatch
      - DEBUG=${DEBUG-}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - DISABLE_CORS_CHECKS=1
      - KINESIS_LATENCY=0
    volumes:
      - ${TMPDIR:-/tmp}/localstack:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
      - ./localstack/init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh

  stream-collector:
    container_name: s-stream-collector
    image: snowplow/scala-stream-collector-kinesis:3.2.0-distroless
    command: ["--config", "/snowplow/collector/config.hocon"]
    depends_on:
      - localstack
    restart: always
    ports:
      - 9090:8080
    environment:
      - ACCEPT_LICENSE=${ACCEPT_LICENSE}
      - AWS_REGION=eu-west-2
      - AWS_ACCESS_KEY_ID=localstack
      - AWS_SECRET_ACCESS_KEY=doesntmatter
      - SNOWBRIDGE_CONFIG_FILE=/config/snowbridge-config.hcl
    volumes:
      - ./stream-collector/config.hocon:/snowplow/collector/config.hocon
    extra_hosts:
      - localhost.localstack.cloud:host-gateway
      - host.docker.internal:host-gateway

  enrich:
    container_name: s-enrich
    image: snowplow/snowplow-enrich-kinesis:5.0.0-distroless
    command: ["--config", "/snowplow/enrich/enrich.hocon", "--iglu-config", "/snowplow/iglu-client/iglu_resolver.json", "--enrichments", "/snowplow/enrich/enrichments"]
    depends_on:
      - stream-collector
    restart: always
    environment:
      - ACCEPT_LICENSE=${ACCEPT_LICENSE}
      - AWS_REGION=eu-west-2
      - AWS_ACCESS_KEY_ID=localstack
      - AWS_SECRET_ACCESS_KEY=doesntmatter
      - AWS_ENDPOINT_URL=localhost.localstack.cloud:4566
    volumes:
      - ./enrich:/snowplow/enrich
      - ./iglu-client:/snowplow/iglu-client
    extra_hosts:
      - localhost.localstack.cloud:host-gateway
      - host.docker.internal:host-gateway

  snowbridge:
    container_name: s-snowbridge
    image: snowplow/snowbridge:2.4.2-aws-only
    command: ["/opt/snowplow/snowbridge"]
    environment:
      - ACCEPT_LICENSE=${ACCEPT_LICENSE}
      - AWS_REGION=eu-west-2
      - AWS_ACCESS_KEY_ID=localstack
      - AWS_SECRET_ACCESS_KEY=doesntmatter
      - AWS_ENDPOINT_URL=http://localhost.localstack.cloud:4566
      - JS_SCRIPT_PATH=/snowbridge/video-data.js
      - SNOWBRIDGE_CONFIG_FILE=/snowbridge/config.hcl
    volumes:
      - ./snowbridge:/snowbridge
    extra_hosts:
      - localhost.localstack.cloud:host-gateway
    depends_on:
      - enrich
      - localstack
      - kafka-init
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics --bootstrap-server kafka:9093 --list | grep -q snowplow-enriched-good"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  js-tracker:
    container_name: s-js-tracker
    build: js-tracker
    ports:
      - 3000:3000

  zookeeper:
    container_name: s-zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log

  kafka:
    container_name: s-kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9093,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
      - kafka_logs:/var/lib/kafka/log
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'status' | nc localhost 9093 | grep 'Mode: '"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-init:
    container_name: s-kafka-init
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: >
      bash -c "
        echo 'Waiting for Kafka to be ready...'
        while ! nc -z kafka 9093; do
          sleep 1
        done
        echo 'Kafka is ready. Creating topic...'
        kafka-topics --create --topic snowplow-enriched-good --bootstrap-server kafka:9093 --replication-factor 1 --partitions 1
        if [ $? -eq 0 ]; then
          echo 'Topic \"snowplow-enriched-good\" created successfully.'
        else
          echo 'Topic \"snowplow-enriched-good\" already exists.'
        fi
      "
    restart: no

  kafka-ui:
    container_name: s-kafka-ui
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      #KAFKA_CLUSTERS_0_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
    depends_on:
      - kafka

  live-viewer-backend:
    container_name: s-backend
    build: live-viewer-backend
    ports:
      - 8180:8080
    environment:
      AWS_REGION: eu-west-2
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: admin
      AWS_ENDPOINT_URL: http://localstack:4566
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
    depends_on:
      - kafka-init
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics --bootstrap-server kafka:9093 --list | grep -q snowplow-enriched-good"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: on-failure

  live-viewer-frontend:
    container_name: s-frontend
    build: live-viewer-frontend
    ports:
      - 8280:80
    volumes:
      - ./live-viewer-frontend/public:/app
    depends_on:
      - live-viewer-backend

volumes:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  kafka_logs:
